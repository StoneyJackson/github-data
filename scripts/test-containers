#!/bin/bash

# Container Integration Test Script
# This script helps run container integration tests with proper Docker setup and cleanup

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if Docker is running
check_docker() {
    if ! docker info >/dev/null 2>&1; then
        print_error "Docker is not running. Please start Docker and try again."
        exit 1
    fi
}

# Function to check if docker-compose is available
check_docker_compose() {
    if ! command -v docker-compose >/dev/null 2>&1; then
        print_warning "docker-compose not found. Some tests may be skipped."
        return 1
    fi
    return 0
}

# Function to cleanup Docker resources
cleanup_docker() {
    print_info "Cleaning up Docker resources..."
    
    # Stop and remove test containers
    docker ps -a --filter "name=github-data-test" -q | xargs -r docker rm -f
    
    # Remove test images
    docker images --filter "reference=github-data-test*" -q | xargs -r docker rmi -f
    
    # Clean up Docker Compose resources
    if check_docker_compose; then
        docker-compose -f docker-compose.test.yml -p github-data-test down -v --remove-orphans 2>/dev/null || true
    fi
    
    print_info "Docker cleanup completed."
}

# Function to run specific test categories
run_tests() {
    local test_type="$1"
    
    case "$test_type" in
        "container")
            print_info "Running container integration tests..."
            pdm run pytest -v -m container --timeout=300
            ;;
        "docker")
            print_info "Running Docker-related tests..."
            pdm run pytest -v -m docker --timeout=300
            ;;
        "all")
            print_info "Running all container integration tests..."
            pdm run pytest -v tests/test_container_integration.py tests/test_docker_compose_integration.py --timeout=300
            ;;
        *)
            print_error "Unknown test type: $test_type"
            echo "Available types: container, docker, all"
            exit 1
            ;;
    esac
}

# Main script logic
main() {
    local test_type="${1:-all}"
    local cleanup_after="${2:-yes}"
    
    print_info "Starting container integration tests..."
    print_info "Test type: $test_type"
    
    # Pre-flight checks
    check_docker
    if check_docker_compose; then
        print_info "Docker Compose is available."
    fi
    
    # Cleanup before starting
    cleanup_docker
    
    # Install dependencies if needed
    if [ ! -d ".venv" ] && [ ! -f "pdm.lock" ]; then
        print_info "Installing dependencies..."
        make install-dev
    fi
    
    # Run tests
    set +e  # Don't exit on test failures
    run_tests "$test_type"
    test_exit_code=$?
    set -e
    
    # Cleanup after tests if requested
    if [ "$cleanup_after" = "yes" ]; then
        cleanup_docker
    else
        print_warning "Skipping cleanup. Use 'docker system prune' to clean up later."
    fi
    
    # Report results
    if [ $test_exit_code -eq 0 ]; then
        print_info "All container integration tests passed!"
    else
        print_error "Some container integration tests failed (exit code: $test_exit_code)"
    fi
    
    exit $test_exit_code
}

# Help function
show_help() {
    cat << EOF
Container Integration Test Script

Usage: $0 [TEST_TYPE] [CLEANUP]

Arguments:
  TEST_TYPE    Type of tests to run (default: all)
               - container: Run container-specific tests
               - docker: Run all Docker-related tests  
               - all: Run all container integration tests
               
  CLEANUP      Whether to cleanup Docker resources after tests (default: yes)
               - yes: Clean up Docker resources after tests
               - no: Skip cleanup (useful for debugging)

Examples:
  $0                    # Run all container tests with cleanup
  $0 container          # Run container tests only
  $0 docker no          # Run Docker tests without cleanup
  
Environment Variables:
  DOCKER_HOST          Docker daemon host (if using remote Docker)
  
Prerequisites:
  - Docker must be running
  - PDM must be installed
  - Project dependencies must be installed (run 'make install-dev')

EOF
}

# Parse arguments
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    show_help
    exit 0
fi

# Run main function
main "$@"
name: CD - Release

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install PDM
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: make install-dev

      - name: Run linting
        run: make lint

      - name: Run type checking
        run: make type-check

      - name: Run all tests including container tests
        run: make test

  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: test
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21 @semantic-release/changelog@6 @semantic-release/git@10

      - name: Create semantic-release config
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              "@semantic-release/github",
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ]
            ]
          }
          EOF

      - name: Run semantic-release
        id: semantic
        run: |
          export GITHUB_OUTPUT_FILE="$GITHUB_OUTPUT"
          npx semantic-release > semantic-release-output.log 2>&1
          
          # Check if semantic-release created a new release
          if grep -q "Published release" semantic-release-output.log; then
            echo "new_release_published=true" >> $GITHUB_OUTPUT_FILE
            # Extract version from git tag
            LATEST_TAG=$(git describe --tags --abbrev=0)
            echo "new_release_version=${LATEST_TAG}" >> $GITHUB_OUTPUT_FILE
            echo "✓ New release published: ${LATEST_TAG}"
          else
            echo "new_release_published=false" >> $GITHUB_OUTPUT_FILE
            echo "new_release_version=" >> $GITHUB_OUTPUT_FILE
            echo "ℹ No new release published"
          fi
          
          cat semantic-release-output.log
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push:
    name: Build and Push Release Image
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.new_release_published == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert repository name to lowercase
        shell: bash
        run: echo "repository=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
        id: lowercase_repo

      - name: Generate version tags
        id: version_tags
        shell: bash
        run: |
          VERSION="${{ needs.release.outputs.new_release_version }}"
          # Remove 'v' prefix if present for processing
          VERSION_NO_V="${VERSION#v}"
          
          # Split version into parts (e.g., 1.2.3 -> 1, 2, 3)
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NO_V"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]:-0}"
          PATCH="${VERSION_PARTS[2]:-0}"
          
          # Build tag list
          REPO="ghcr.io/${{ steps.lowercase_repo.outputs.repository }}"
          TAGS="${REPO}:latest"
          TAGS="${TAGS},${REPO}:${VERSION}"
          TAGS="${TAGS},${REPO}:v${MAJOR}.${MINOR}"
          TAGS="${TAGS},${REPO}:v${MAJOR}"
          
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "Generated tags: ${TAGS}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.version_tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  cleanup-packages:
    name: Cleanup Untagged Packages
    runs-on: ubuntu-latest
    needs: build-and-push
    if: needs.release.outputs.new_release_published == 'true'

    steps:
      - name: Cleanup untagged packages
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const packageName = context.repo.repo;
            
            console.log(`Cleaning up packages for ${owner}/${packageName}`);
            
            try {
              // Get all package versions
              const { data: versions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                package_type: 'container',
                package_name: packageName,
                org: owner,
                per_page: 100
              });
              
              console.log(`Found ${versions.length} package versions`);
              
              const versionsToDelete = [];
              
              for (const version of versions) {
                const tags = version.metadata?.container?.tags || [];
                console.log(`Version ${version.id}: tags = [${tags.join(', ')}]`);
                
                // Keep versions that have valid tags
                const hasValidTag = tags.some(tag => {
                  // Keep 'latest' tag
                  if (tag === 'latest') return true;
                  
                  // Keep version tags (v1, v1.2, v1.2.3, 1.0.0, etc.)
                  const versionPattern = /^v?\d+(\.\d+)?(\.\d+)?$/;
                  return versionPattern.test(tag);
                });
                
                if (!hasValidTag && tags.length > 0) {
                  console.log(`Marking version ${version.id} for deletion (tags: [${tags.join(', ')}])`);
                  versionsToDelete.push(version);
                } else if (tags.length === 0) {
                  console.log(`Marking untagged version ${version.id} for deletion`);
                  versionsToDelete.push(version);
                } else {
                  console.log(`Keeping version ${version.id} (tags: [${tags.join(', ')}])`);
                }
              }
              
              console.log(`Deleting ${versionsToDelete.length} package versions`);
              
              for (const version of versionsToDelete) {
                try {
                  await github.rest.packages.deletePackageVersionForOrg({
                    package_type: 'container',
                    package_name: packageName,
                    org: owner,
                    package_version_id: version.id
                  });
                  console.log(`✓ Deleted package version ${version.id}`);
                } catch (error) {
                  console.log(`✗ Failed to delete package version ${version.id}: ${error.message}`);
                }
              }
              
              console.log('Package cleanup completed');
              
            } catch (error) {
              // Handle case where package doesn't exist or is owned by user instead of org
              if (error.status === 404) {
                console.log('Package not found or checking user-owned packages...');
                try {
                  const { data: userVersions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
                    package_type: 'container',
                    package_name: packageName,
                    username: owner,
                    per_page: 100
                  });
                  
                  console.log(`Found ${userVersions.length} user package versions`);
                  
                  const userVersionsToDelete = [];
                  
                  for (const version of userVersions) {
                    const tags = version.metadata?.container?.tags || [];
                    console.log(`User version ${version.id}: tags = [${tags.join(', ')}]`);
                    
                    const hasValidTag = tags.some(tag => {
                      if (tag === 'latest') return true;
                      const versionPattern = /^v?\d+(\.\d+)?(\.\d+)?$/;
                      return versionPattern.test(tag);
                    });
                    
                    if (!hasValidTag && tags.length > 0) {
                      console.log(`Marking user version ${version.id} for deletion (tags: [${tags.join(', ')}])`);
                      userVersionsToDelete.push(version);
                    } else if (tags.length === 0) {
                      console.log(`Marking untagged user version ${version.id} for deletion`);
                      userVersionsToDelete.push(version);
                    } else {
                      console.log(`Keeping user version ${version.id} (tags: [${tags.join(', ')}])`);
                    }
                  }
                  
                  console.log(`Deleting ${userVersionsToDelete.length} user package versions`);
                  
                  for (const version of userVersionsToDelete) {
                    try {
                      await github.rest.packages.deletePackageVersionForUser({
                        package_type: 'container',
                        package_name: packageName,
                        username: owner,
                        package_version_id: version.id
                      });
                      console.log(`✓ Deleted user package version ${version.id}`);
                    } catch (deleteError) {
                      console.log(`✗ Failed to delete user package version ${version.id}: ${deleteError.message}`);
                    }
                  }
                  
                } catch (userError) {
                  console.log(`Error accessing user packages: ${userError.message}`);
                }
              } else {
                console.log(`Error accessing packages: ${error.message}`);
              }
            }

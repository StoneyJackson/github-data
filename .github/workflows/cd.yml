name: CD - Release

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install PDM
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: make install-dev

      - name: Run linting
        run: make lint

      - name: Run type checking
        run: make type-check

      - name: Run all tests including container tests
        run: make test

  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: test
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21 @semantic-release/changelog@6 @semantic-release/git@10

      - name: Create semantic-release config
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              "@semantic-release/github",
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ]
            ]
          }
          EOF

      - name: Run semantic-release
        id: semantic
        run: |
          export GITHUB_OUTPUT_FILE="$GITHUB_OUTPUT"
          npx semantic-release > semantic-release-output.log 2>&1

          # Check if semantic-release created a new release
          if grep -q "Published release" semantic-release-output.log; then
            echo "new_release_published=true" >> $GITHUB_OUTPUT_FILE
            # Extract version from git tag
            LATEST_TAG=$(git describe --tags --abbrev=0)
            echo "new_release_version=${LATEST_TAG}" >> $GITHUB_OUTPUT_FILE
            echo "✓ New release published: ${LATEST_TAG}"
          else
            echo "new_release_published=false" >> $GITHUB_OUTPUT_FILE
            echo "new_release_version=" >> $GITHUB_OUTPUT_FILE
            echo "ℹ No new release published"
          fi

          cat semantic-release-output.log
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push:
    name: Build and Push Release Image
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.new_release_published == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert repository name to lowercase
        shell: bash
        run: echo "repository=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
        id: lowercase_repo

      - name: Generate version tags
        id: version_tags
        shell: bash
        run: |
          VERSION="${{ needs.release.outputs.new_release_version }}"
          # Remove 'v' prefix if present for processing
          VERSION_NO_V="${VERSION#v}"

          # Split version into parts (e.g., 1.2.3 -> 1, 2, 3)
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NO_V"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]:-0}"
          PATCH="${VERSION_PARTS[2]:-0}"

          # Build tag list
          REPO="ghcr.io/${{ steps.lowercase_repo.outputs.repository }}"
          TAGS="${REPO}:latest"
          TAGS="${TAGS},${REPO}:${VERSION}"
          TAGS="${TAGS},${REPO}:v${MAJOR}.${MINOR}"
          TAGS="${TAGS},${REPO}:v${MAJOR}"

          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "Generated tags: ${TAGS}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.version_tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  delete-untagged-images:
    name: ghcr cleanup action
    runs-on: ubuntu-latest
    needs: build-and-push
    if: needs.release.outputs.new_release_published == 'true'
    steps:
      - name: Delete image
        uses: dataaxiom/ghcr-cleanup-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          delete-untagged: true

"""Entity configuration for {{ entity_name }}.

This file was auto-generated by src/tools/generate_entity.py
"""
from typing import Union, Set, Optional, List, TYPE_CHECKING

if TYPE_CHECKING:
    from src.entities.strategy_context import StrategyContext
    from src.entities.{{ entity_name }}.save_strategy import {{ save_strategy_class }}
    from src.entities.{{ entity_name }}.restore_strategy import {{ restore_strategy_class }}


class {{ class_name }}:
    """{{ description }}

    Auto-discovered by naming convention: *EntityConfig
    """

    name = "{{ entity_name }}"
    env_var = "{{ env_var }}"
    default_value = {{ default_value }}
    value_type = {{ value_type }}
    {% if dependencies %}
    dependencies = {{ dependencies }}
    {% else %}
    dependencies: List[str] = []
    {% endif %}
    description = "{{ description }}"

    # Service requirements
    required_services_save: List[str] = {{ required_services_save }}
    required_services_restore: List[str] = {{ required_services_restore }}

    @staticmethod
    def create_save_strategy(
        context: "StrategyContext",
    ) -> Optional["{{ save_strategy_class }}"]:
        """Create save strategy instance.

        Args:
            context: Typed strategy context with validated services

        Returns:
            {{ save_strategy_class }} instance or None if not applicable
        """
        from src.entities.{{ entity_name }}.save_strategy import {{ save_strategy_class }}
{%- if save_services %}

        # Extract required services from context
{%- for service in save_services %}
        {{ service }} = context.{{ service }}
{%- endfor %}

        return {{ save_strategy_class }}({{ save_services|join(', ') }})
{%- else %}

        return {{ save_strategy_class }}()
{%- endif %}

    @staticmethod
    def create_restore_strategy(
        context: "StrategyContext",
    ) -> Optional["{{ restore_strategy_class }}"]:
        """Create restore strategy instance.

        Args:
            context: Typed strategy context with validated services

        Returns:
            {{ restore_strategy_class }} instance or None if not applicable
        """
        from src.entities.{{ entity_name }}.restore_strategy import {{ restore_strategy_class }}
{%- if restore_services %}

        # Extract required services from context
{%- for service in restore_services %}
        {{ service }} = context.{{ service }}
{%- endfor %}

        return {{ restore_strategy_class }}({{ restore_services|join(', ') }})
{%- else %}

        return {{ restore_strategy_class }}()
{%- endif %}

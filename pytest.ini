[tool:pytest]
# Test discovery configuration
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Marker configuration
markers =
    # Performance markers
    fast: Fast tests (< 1 second) - suitable for TDD cycles
    medium: Medium speed tests (1-10 seconds) - integration tests  
    slow: Slow tests (> 10 seconds) - container/end-to-end tests
    
    # Test type markers
    unit: Unit tests - isolated component testing
    integration: Integration tests - component interactions
    container: Container tests - full Docker workflows
    
    # Feature area markers
    labels: Label management functionality tests
    issues: Issue management functionality tests
    comments: Comment management functionality tests
    include_issue_comments: Issue comments feature tests (INCLUDE_ISSUE_COMMENTS)
    include_pull_request_comments: Pull request comments feature tests
    pr_comments: Pull request comment functionality tests
    sub_issues: Sub-issues workflow functionality tests
    pull_requests: Pull request workflow functionality tests
    git_repositories: Git repository backup/restore functionality tests
    
    # Infrastructure markers
    github_api: GitHub API interaction tests (real or mocked)
    storage: Data storage and persistence tests
    save_workflow: Save operation workflow tests
    restore_workflow: Restore operation workflow tests
    save_operation: Save operation workflow tests
    restore_operation: Restore operation workflow tests
    error_handling: Error handling and resilience tests
    strategy_factory: Strategy factory integration tests
    end_to_end: End-to-end feature tests
    
    # Special scenario markers
    empty_repository: Empty repository scenario tests
    large_dataset: Large dataset scenario tests
    rate_limiting: Rate limiting behavior tests
    error_simulation: Error condition simulation tests

    # Enhanced fixture category markers
    enhanced_fixtures: Tests using enhanced fixture patterns
    data_builders: Tests using dynamic data builder fixtures
    workflow_services: Tests using workflow service fixtures
    performance_fixtures: Tests using performance monitoring fixtures
    
    # Additional performance and complexity markers
    performance: Performance testing and benchmarking
    memory_intensive: Tests with high memory usage
    simple_data: Tests with simple data structures
    complex_hierarchy: Tests with complex hierarchical data
    temporal_data: Tests with time-sensitive data patterns
    mixed_states: Tests with mixed state data (open/closed, etc.)
    cross_component_interaction: Tests validating interactions between multiple components
    data_enrichment: Tests for data enrichment utilities
    edge_cases: Edge case and boundary condition tests
    issue_comments_validation: Issue comments validation functionality tests
    backward_compatibility: Backward compatibility preservation tests

# Output and behavior configuration
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --color=yes
    --durations=10

# Minimum pytest version
minversion = 6.0

# Test timeout (for hanging tests)
timeout = 300

# Warnings configuration
# Note: PytestAssertRewriteWarning cannot be filtered here as it occurs during pytest configuration
# before warning filters are applied. These warnings are harmless and expected when using
# pytest_plugins with fixture modules.
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning:pkg_resources.*

[coverage:run]
branch = true
source = src
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
skip_covered = true
show_missing = true
precision = 2

[coverage:html]
directory = htmlcov
title = GitHub Data Test Coverage
